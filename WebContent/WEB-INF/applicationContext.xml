<?xml version="1.0" encoding="UTF-8"?>
<!-- 指定Spring配置文件的Schema信息 -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
 
	<!-- 定义数据源Bean，使用C3P0数据源实现 -->
	<!-- 设置连接数据库的驱动、URL、用户名、密码 连接池最大连接数、最小连接数、初始连接数等参数 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close" 
		p:driverClass="com.mysql.jdbc.Driver"
		p:jdbcUrl="jdbc:mysql://127.0.0.1:3306/shopping?characterEncoding=utf-8"
		p:user="root" 
		p:password=""
		p:maxPoolSize="100"
		p:minPoolSize="1" 
		p:initialPoolSize="1" 
		p:maxIdleTime="20" />

	<!-- 定义Hibernate的SessionFactory -->
	<!-- 依赖注入数据源，注入正是上面定义的dataSource -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.LocalSessionFactoryBean"
		p:dataSource-ref="dataSource">
		<!-- mappingResouces属性用来列出全部映射文件 -->
		<property name="mappingResources">
			<list>
				<!-- 以下用来列出Hibernate映射文件 -->
				<value>com/xwkj/shopping/domain/Sendee.hbm.xml</value>
				<value>com/xwkj/shopping/domain/Icon.hbm.xml</value>
				<value>com/xwkj/shopping/domain/Type.hbm.xml</value>
				<value>com/xwkj/shopping/domain/Category.hbm.xml</value>
				<value>com/xwkj/shopping/domain/Photo.hbm.xml</value>
				<value>com/xwkj/shopping/domain/Good.hbm.xml</value>
				<value>com/xwkj/shopping/domain/Order.hbm.xml</value>
				<value>com/xwkj/shopping/domain/Basket.hbm.xml</value>
				<value>com/xwkj/shopping/domain/Comment.hbm.xml</value>
			</list>
		</property>
		<!-- 定义Hibernate的SessionFactory的属性 -->
		<property name="hibernateProperties">
			<!-- 指定数据库方言、是否自动建表 是否生成SQL语句等 -->
			<value>
				hibernate.dialect=org.hibernate.dialect.MySQLDialect
				hibernate.hbm2ddl.auto=update
				#hibernate.show_sql=true
				#hibernate.format_sql=true
			</value>
		</property>
	</bean>

	<!-- 配置Hibernate的局部事务管理器，使用HibernateTransactionManager类 -->
	<!-- 该类实现PlatformTransactionManager接口，是针对Hibernate的特定实现 -->
	<!-- 并注入SessionFactory的引用 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager"
		p:sessionFactory-ref="sessionFactory" />

	<!-- 配置事务增强处理Bean,指定事务管理器 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<!-- 用于配置详细的事务语义 -->
		<tx:attributes>
			<!-- 所有以'get'开头的方法是read-only的 -->
			<tx:method name="get*" read-only="true" />
			<!-- 其他方法使用默认的事务设置 -->
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<!-- 配置一个切入点，匹配empManager和mgrManager 两个Bean的所有方法的执行 -->
		<aop:pointcut id="leePointcut" expression="bean(empManager)" />
		<!-- 指定在leePointcut切入点应用txAdvice事务增强处理 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="leePointcut" />
	</aop:config>

	<!-- 定义业服务层模板 -->
 	<bean id="managerTemplate" class="com.xwkj.shopping.service.util.ManagerTemplate">
		<property name="basketDao" ref="basketDao"/>
		<property name="categoryDao" ref="categoryDao"/>
		<property name="goodDao" ref="goodDao"/>
		<property name="iconDao" ref="iconDao"/>
		<property name="orderDao" ref="orderDao"/>
		<property name="photoDao" ref="photoDao"/>
		<property name="sendeeDao" ref="sendeeDao"/>
		<property name="typeDao" ref="typeDao"/>
		<property name="commentDao" ref="commentDao"/>
	</bean>	
	
 	<!-- 定义业务逻辑组件 -->
	<bean id="sendeeManager" class="com.xwkj.shopping.service.impl.SendeeManagerImpl" parent="managerTemplate">
		<property name="BookingDomain" value="house.jziyo.com"></property>
	</bean>
	<bean id="typeManager" class="com.xwkj.shopping.service.impl.TypeManagerImpl" parent="managerTemplate"/>
	<bean id="categoryManager" class="com.xwkj.shopping.service.impl.CategoryManagerImpl" parent="managerTemplate"/>
	<bean id="goodManager" class="com.xwkj.shopping.service.impl.GoodManagerImpl" parent="managerTemplate"/>
	<bean id="photoManager" class="com.xwkj.shopping.service.impl.PhotoManagerImpl" parent="managerTemplate"/>
	<bean id="basketManager" class="com.xwkj.shopping.service.impl.BasketManagerImpl" parent="managerTemplate"/>
	<bean id="orderManager" class="com.xwkj.shopping.service.impl.OrderManagerImpl" parent="managerTemplate">
		<property name="ExpressTure" value="快递包邮"></property>
		<property name="ExpressFalse" value="用户自取"></property>
		<property name="PayTimeOut" value="60"></property>
		<property name="OrderSuccessSMSTemplateID" value="********************下订单短信模板******************"></property>
		<property name="PaySuccessSMSTemplateID" value="********************支付成功短信模板******************"></property>
		<property name="RefundFailedSMSTemplateID" value="********************退款失败短信模板******************"></property>
		<property name="RefundSuccessSMSTemplateID" value="********************退款成功短信模板******************"></property>
		<property name="adminTelephone" value="*******************管理员手机号******************"></property>
	</bean> 
	<bean id="commentManager" class="com.xwkj.shopping.service.impl.CommentManagerImpl" parent="managerTemplate"/>
	<!-- 配置管理员用户名密码 -->
	<bean id="adminManager" class="com.xwkj.shopping.service.impl.AdminManagerImpl">
		<property name="accounts" value="[{name: 'admin', password: '123'}]"></property>
	</bean> 
	<bean id="mailManager" class="com.xwkj.shopping.service.impl.MailManagerImpl" parent="managerTemplate">
		<property name="SMTPServer" value="*******************邮箱SMTP服务器*****************"></property>
		<property name="username" value="*******************邮箱地址******************"></property>
		<property name="password" value="********************邮箱密码 第三方授权码******************"></property>
		<property name="subject" value="shop.jziyo.com"></property>
		<property name="ExpressTure" value="快递包邮"></property>
		<property name="ExpressFalse" value="用户自取"></property>
		<property name="createMail" value="尊敬的#name#，\n您的订单#ono#已成功支付，共#count#件商品，合计#amount#元。\n您的配送信息如下，请仔细核对，\n配送方式：#express#\n收货人：#name#\n电话：#telephone#\n地址：#address#\n邮编：#zip#\n如有错误请联系相关工作人员处理。\n\n九资游网上购物商城"></property>
		<property name="sendMail" value=""></property>
		<property name="receiveMail" value=""></property>
	</bean> 
	
	<!-- 定义短信服务组件 -->
	<bean id="SMSService" class="com.xwkj.common.util.SMSService">
		<property name="SMSUrl" value="http://v.juhe.cn/sms/send"></property>
		<property name="SMSKey" value="********************聚合数据短信api密钥******************"></property>
	</bean>
	
	<!--定义支付宝服务组件 -->
	<bean id="AlipaySubmit" class="com.alipay.service.AlipaySubmit">
		<property name="partner" value="********************支付宝合作者id******************"></property>
		<property name="seller_email" value="********************支付宝邮箱******************"></property>
		<property name="key" value="********************支付宝密钥******************"></property>
		<property name="notify_url" value="http://shop.jziyo.com/AlipayPayedServlet"></property>
		<property name="return_url" value="http://shop.jziyo.com/pay.html?ono="></property>
		<property name="show_url" value="http://shop.jziyo.com/pay.html?ono="></property>
	</bean>
	
	<!-- 定义触发器来管理任务Bean -->
	<bean id="cronTriggerTimeout" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail">
			<!-- 使用嵌套Bean的方式来定义任务Bean -->
			<bean class="org.springframework.scheduling.quartz.JobDetailBean">
				<!-- 指定任务Bean的实现类 -->
				<property name="jobClass" value="com.xwkj.shopping.schedule.CloseTimeoutOrdersJob"/>
				<!-- 为任务Bean注入属性 -->
				<property name="jobDataAsMap">
					<map>
						<entry key="managerTemplate" value-ref="managerTemplate"/>
						<entry key="orderManager" value-ref="orderManager"/>
					</map>
				</property>
			</bean>
		</property>
		<!-- 指定Cron表达式：每隔一分钟检查一次超时未支付的订单 -->
		<property name="cronExpression" value="0 */1 * * * ?"/>
	</bean>
	<!-- 执行实际的调度调度 -->
	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref local="cronTriggerTimeout"/>
			</list>
		</property>
	</bean>
</beans>